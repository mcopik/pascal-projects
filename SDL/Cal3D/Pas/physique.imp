//****************************************************************************//
// physique.cpp                                                               //
// Copyright (C) 2001, 2002 Bruno 'Beosil' Heidelberger                       //
//****************************************************************************//
// This library is free software; you can redistribute it and/or modify it    //
// under the terms of the GNU Lesser General Public License as published by   //
// the Free Software Foundation; either version 2.1 of the License, or (at    //
// your option) any later version.                                            //
//****************************************************************************//

constructor CalPhysique.Create( pModel : CalModel );
var
  pCoreModel : CalCoreModel;
begin
  inherited Create;
  m_Normalize := true;

  if ( pModel = nil ) then
  begin
    {$IFDEF DEBUG_CAL3D}
    CalError.setLastError( INVALID_HANDLE, 'physique.imp', 104 );
    {$ENDIF}
    exit;
  end;

  m_pModel := pModel;


  pCoreModel := m_pModel.getCoreModel;
  if ( pCoreModel = nil ) then
  begin
    {$IFDEF DEBUG_CAL3D}
    CalError.setLastError( INVALID_HANDLE, 'physique.imp', 115 );
    {$ENDIF}
    exit;
  end;
end;

destructor CalPhysique.Destroy;
begin
  m_pModel := nil;
  inherited;
end;

procedure CalPhysique.calculateTangentSpaces( var pSubmesh : CalSubmesh; mapId : integer; var TangentSpaces: vectorTangentSpaces );
var
  vectorBone : CalBones;
  vectorVertex : vectorVertexes;
  vectorTangentSpace : vectorTangentSpaces;
  tS : TangentSpace;
  vertexCount : integer;
  vertexId : integer;
  myvertex : Vertex;
  tx, ty, tz : float;
  influenceId, influenceCount : integer;
  _influence : Influence;
  pBone : CalBone;
  v : CalVector;
  scale : float;
begin
  // Get Rid of compiler warnings
  v := CalVector.Create;
  vectorBone := nil;
  vectorVertex := nil;
  vectorTangentSpace := nil;
  if( ( mapId < 0 ) or ( mapId >= Length( pSubmesh.getCoreSubmesh.getVectorVectorTangentSpace ) ) ) then
  begin
    TangentSpaces := nil;
    exit;
  end;

  // get bone vector of the skeleton
  vectorBone := m_pModel.getSkeleton.getVectorBone;

  // get vertex vector of the submesh
  vectorVertex := pSubmesh.getCoreSubmesh.getVectorVertex;

  // get tangent space vector of the submesh
  vectorTangentSpace := pSubmesh.getCoreSubmesh.getVectorVectorTangentSpace[mapId];

  // get the number of vertices
  vertexCount := pSubmesh.getVertexCount;

  SetLength( TangentSpaces, vertexCount );

  // calculate normal for all submesh vertices
  for vertexId := 0 to vertexCount - 1 do
  begin
    tS := vectorTangentSpace[vertexId];

    // get the vertex
    myvertex := vectorVertex[vertexId];

    // initialize tangent
    tx := 0.0;
    ty := 0.0;
    tz := 0.0;

    // blend together all vertex influences
    influenceCount := Length( myvertex.vectorInfluence );

    for influenceId := 0 to influenceCount - 1 do
    begin
      // get the influence
      _influence := myvertex.vectorInfluence[influenceId];

      // get the bone of the influence vertex
      pBone := vectorBone[_influence.boneId];

      // transform normal with current state of the bone
      v.assign( tS.tangent );
      v.mult( pBone.getTransformMatrix );

      tx := tx + ( _influence.weight * v.x );
      ty := ty + ( _influence.weight * v.y );
      tz := tz + ( _influence.weight * v.z );
    end;

    // re-normalize tangent if necessary
    if (m_Normalize) then
    begin
      scale := ( 1.0 / sqrt(tx * tx + ty * ty + tz * tz));

      TangentSpaces[vertexId].tangent := CalVector.Create( tx * scale, ty * scale, tz * scale );
    end
    else
    begin
      TangentSpaces[vertexId].tangent := CalVector.Create( tx, ty, tz  );
    end;

    TangentSpaces[vertexId].crossFactor := tS.crossFactor;
  end;
  v.Free;
end;

procedure CalPhysique.calculateNormals( var pSubmesh : CalSubmesh; var Normals : TNormals );
var
  vectorBone : CalBones;
  vectorVertex : vectorVertexes;
  vertexCount : integer;
  vertexId : integer;
  myvertex : Vertex;
  vectorSubMorphTarget : CalCoreSubMorphTargets;
  baseWeight, currentWeight, scale : float;
  morphTargetCount, morphTargetId : integer;
  normal, v : CalVector;
  nx, ny, nz : float;
  influenceId, influenceCount : integer;
  _influence : Influence;
  pBone : CalBone;
  bV : BlendVertex;
begin
  // get bone vector of the skeleton
  vectorBone := m_pModel.getSkeleton.getVectorBone;

  // get vertex vector of the submesh
  vectorVertex := pSubmesh.getCoreSubmesh.getVectorVertex;

  // get the number of vertices
  vertexCount := pSubmesh.getVertexCount;

  // get the sub morph target vector from the core sub mesh
  vectorSubMorphTarget := pSubmesh.getCoreSubmesh.getVectorCoreSubMorphTarget;

  // calculate the base weight
  baseWeight := pSubmesh.getBaseWeight;

  // get the number of morph targets
  morphTargetCount := pSubmesh.getMorphTargetWeightCount;

  // Resize the result as we will need it
  SetLength( Normals, vertexCount );

  normal := CalVector.Create;
  // calculate normal for all submesh vertices
  for vertexId := 0 to vertexCount - 1 do
  begin
    // get the vertex
    myvertex := vectorVertex[ vertexId ];

    // blend the morph targets
    if ( baseWeight = 1.0 ) then
    begin
      normal.x := myvertex.normal.x;
      normal.y := myvertex.normal.y;
      normal.z := myvertex.normal.z;
    end
    else
    begin
      normal.x := baseWeight * myvertex.normal.x;
      normal.y := baseWeight * myvertex.normal.y;
      normal.z := baseWeight * myvertex.normal.z;

      for morphTargetId := 0 to morphTargetCount - 1 do
      begin
        bV := vectorSubMorphTarget[ morphTargetId ].getVectorBlendVertex[ vertexId ];
        currentWeight := pSubmesh.getMorphTargetWeight( morphTargetId );
        normal.x := normal.x + ( currentWeight * bV.normal.x );
        normal.y := normal.y + ( currentWeight * bV.normal.y );
        normal.z := normal.z + ( currentWeight * bV.normal.z );
      end;
    end;

    // initialize normal
    nx := 0.0;
    ny := 0.0;
    nz := 0.0;

    v := CalVector.Create;
    // blend together all vertex influences
    influenceCount := Length( myvertex.vectorInfluence );
    for influenceId := 0 to influenceCount - 1 do
    begin
      // get the influence
      _influence := myvertex.vectorInfluence[ influenceId ];

      // get the bone of the influence vertex
      pBone := vectorBone[ _influence.boneId ];

      // transform normal with current state of the bone
      v.assign( normal );
      v.mult( pBone.getTransformMatrix );

      nx := nx + ( _influence.weight * v.x );
      ny := ny + ( _influence.weight * v.y );
      nz := nz + ( _influence.weight * v.z );
    end;
    v.free;

    // re-normalize normal if necessary
    if ( m_Normalize ) then
    begin
      scale := ( 1.0 / sqrt( nx * nx + ny * ny + nz * nz ) );

      Normals[ vertexId ].x := nx * scale;
      Normals[ vertexId ].y := ny * scale;
      Normals[ vertexId ].z := nz * scale;
    end
    else
    begin
      Normals[ vertexId ].x := nx;
      Normals[ vertexId ].y := ny;
      Normals[ vertexId ].z := nz;
    end;
  end;
  normal.free;
end;

procedure CalPhysique.calculateVertices( var pSubmesh : CalSubmesh; var Vertices : TVertices );
var
  vectorBone : CalBones;
  vectorVertex : vectorVertexes;
  vertexCount : integer;
  vertexId : integer;
  myvertex : Vertex;
  vectorSubMorphTarget : CalCoreSubMorphTargets;
  baseWeight, currentWeight, scale : float;
  morphTargetCount, morphTargetId : integer;
  position, v : CalVector;
  x, y, z : float;
  influenceId, influenceCount : integer;
  _influence : Influence;
  pBone : CalBone;
  vectorPhysicalProperty : vectorPhysicalProperties;
  PP : PhysicalProperty;
  bv : BlendVertex;

begin
  // get bone vector of the skeleton
  vectorBone := m_pModel.getSkeleton.getVectorBone;

  // get vertex vector of the submesh
  vectorVertex := pSubmesh.getCoreSubmesh.getVectorVertex;

  // get physical property vector of the core submesh
  vectorPhysicalProperty := pSubmesh.getCoreSubmesh.getVectorPhysicalProperty;

  // get the number of vertices
  vertexCount := pSubmesh.getVertexCount;

  // get the sub morph target vector from the core sub mesh
  vectorSubMorphTarget := pSubmesh.getCoreSubmesh.getVectorCoreSubMorphTarget;

  // calculate the base weight
  baseWeight := pSubmesh.getBaseWeight;

  // get the number of morph targets
  morphTargetCount := pSubmesh.getMorphTargetWeightCount;

  // Resize the result as we will need it
  SetLength( Vertices, vertexCount );

  // calculate normal for all submesh vertices
  position := CalVector.Create;
  for vertexId := 0 to vertexCount - 1 do
  begin
    // get the vertex
    myvertex := vectorVertex[ vertexId ];
    
    // blend the morph targets
    if ( baseWeight = 1.0 ) then
    begin
      position.x := myvertex.position.x;
      position.y := myvertex.position.y;
      position.z := myvertex.position.z;
    end
    else
    begin
      position.x := baseWeight * myvertex.position.x;
      position.y := baseWeight * myvertex.position.y;
      position.z := baseWeight * myvertex.position.z;

      for morphTargetId := 0 to morphTargetCount - 1 do
      begin
        bv := vectorSubMorphTarget[ morphTargetId ].getVectorBlendVertex[ vertexId ];
        currentWeight := pSubmesh.getMorphTargetWeight( morphTargetId );
        position.x := position.x + ( currentWeight * bv.position.x );
        position.y := position.y + ( currentWeight * bv.position.y );
        position.z := position.z + ( currentWeight * bv.position.z );
      end;
    end;

    // initialize vertex
    x := 0.0;
    y := 0.0;
    z := 0.0;

    v := CalVector.Create;
    // blend together all vertex influences
    influenceCount := Length( myvertex.vectorInfluence );
    for influenceId := 0 to influenceCount - 1 do
    begin
      // get the influence
      _influence := myvertex.vectorInfluence[ influenceId ];

      // get the bone of the influence vertex
      pBone := vectorBone[ _influence.boneId ];

      // transform vertex with current state of the bone
      v.assign( position );
      v.mult( pBone.getTransformMatrix );
      v.add( pBone.getTranslationBoneSpace );

      x := x + ( _influence.weight * v.x );
      y := y + ( _influence.weight * v.y );
      z := z + ( _influence.weight * v.z );
    end;
    v.free;

    // save vertex position
    if ( pSubmesh.getCoreSubmesh.getSpringCount > 0 ) and ( pSubmesh.hasInternalData ) then
    begin
      // get the physical property of the vertex
      PP := vectorPhysicalProperty[ vertexId ];

      // assign new vertex position if there is no vertex weight
      if ( PP.weight = 0.0 ) then
      begin
        Vertices[ vertexId ].x := x;
        Vertices[ vertexId ].y := y;
        Vertices[ vertexId ].z := z;
      end;
    end
    else
    begin
      Vertices[ vertexId ].x := x;
      Vertices[ vertexId ].y := y;
      Vertices[ vertexId ].z := z;
    end
  end;
  position.free;
end;

function CalPhysique.calculateVertex( var pSubmesh : CalSubmesh; vertexId : integer ) : CalVector;
var
  vectorBone : CalBones;
  vectorVertex : vectorVertexes;
  myvertex : Vertex;
  vectorSubMorphTarget : CalCoreSubMorphTargets;
  baseWeight, currentWeight : float;
  morphTargetCount, morphTargetId : integer;
  position, v : CalVector;
  x, y, z : float;
  influenceId, influenceCount : integer;
  _influence : Influence;
  pBone : CalBone;
  vectorPhysicalProperty : vectorPhysicalProperties;
  bv : BlendVertex;
begin
  // get bone vector of the skeleton
  vectorBone := m_pModel.getSkeleton.getVectorBone;

  // get vertex of the core submesh
  vectorVertex := pSubmesh.getCoreSubmesh.getVectorVertex;

  // get physical property vector of the core submesh
  vectorPhysicalProperty := pSubmesh.getCoreSubmesh.getVectorPhysicalProperty;

  // get the sub morph target vector from the core sub mesh
  vectorSubMorphTarget := pSubmesh.getCoreSubmesh.getVectorCoreSubMorphTarget;

  // calculate the base weight
  baseWeight := pSubmesh.getBaseWeight;

  // get the number of morph targets
  morphTargetCount := pSubmesh.getMorphTargetWeightCount;

  // get the vertex
  myvertex := vectorVertex[ vertexId ];

  // blend the morph targets
  position := CalVector.Create;
  if ( baseWeight = 1.0 ) then
  begin
    position.x := myvertex.position.x;
    position.y := myvertex.position.y;
    position.z := myvertex.position.z;
  end
  else
  begin
    position.x := baseWeight * myvertex.position.x;
    position.y := baseWeight * myvertex.position.y;
    position.z := baseWeight * myvertex.position.z;

    for morphTargetId := 0 to morphTargetCount - 1 do
    begin
      bV := vectorSubMorphTarget[ morphTargetId ].getVectorBlendVertex[ vertexId ];
      currentWeight := pSubmesh.getMorphTargetWeight( morphTargetId );
      position.x := position.x + currentWeight * bV.position.x;
      position.y := position.y + currentWeight * bV.position.y;
      position.z := position.z + currentWeight * bV.position.z;
    end;
  end;

  // initialize vertex
  x := 0.0;
  y := 0.0;
  z := 0.0;

  v := CalVector.Create;
  // blend together all vertex influences
  influenceCount := Length( myvertex.vectorInfluence );
  for influenceId := 0 to influenceCount - 1 do
  begin
    // get the influence
    _influence := myvertex.vectorInfluence[ influenceId ];

    // get the bone of the influence vertex
    pBone := vectorBone[ _influence.boneId ];

    // transform vertex with current state of the bone
    v.assign( position );
    v.mult( pBone.getTransformMatrix );
    v.add( pBone.getTranslationBoneSpace );

    x := x + _influence.weight * v.x;
    y := y + _influence.weight * v.y;
    z := z + _influence.weight * v.z;
  end;
  v.Free;

  (* COMMENTED OUT FOR SOME REASON
  // save vertex position
  if(pSubmesh.getCoreSubmesh.getSpringCount > 0 ) and ( pSubmesh.hasInternalData ) then
  begin
    // get the pgysical property of the vertex
    physicalProperty := vectorPhysicalProperty[vertexId];

    // assign new vertex position if there is no vertex weight
    if(physicalProperty.weight = 0.0) then
    begin
      pVertexBuffer[0] := x;
      pVertexBuffer[1] := y;
      pVertexBuffer[2] := z;
    end;
  end
  else
  begin
    pVertexBuffer[0] := x;
    pVertexBuffer[1] := y;
    pVertexBuffer[2] := z;
  end;
  *)
  position.free;
  // return the vertex
  result := CalVector.Create( x, y, z );
end;

procedure CalPhysique.calculateVerticesAndNormals( var pSubmesh : CalSubmesh;  var Vertices : TVertices );
var
  vectorBone : CalBones;
  vectorVertex : vectorVertexes;
  vectorPhysicalProperty : vectorPhysicalProperties;
  vertexCount : integer;
  vectorSubMorphTarget : CalCoreSubMorphTargets;
  baseWeight, currentWeight : float;
  morphTargetCount, vertexId, morphTargetId, influenceId, influenceCount : integer;
  myvertex : Vertex;
  position, normal, v, n : CalVector;
  bV : BlendVertex;
  x, y, z, nx, ny, nz, scale : float;
  _influence : Influence;
  pBone : CalBone;
  pP : PhysicalProperty;
begin
  // get bone vector of the skeleton
  vectorBone := m_pModel.getSkeleton.getVectorBone;

  // get vertex vector of the core submesh
  vectorVertex := pSubmesh.getCoreSubmesh.getVectorVertex;

  // get physical property vector of the core submesh
  vectorPhysicalProperty := pSubmesh.getCoreSubmesh.getVectorPhysicalProperty;

  // get the number of vertices
  vertexCount := pSubmesh.getVertexCount;
  SetLength( Vertices, vertexCount );

  // get the sub morph target vector from the core sub mesh
  vectorSubMorphTarget := pSubmesh.getCoreSubmesh.getVectorCoreSubMorphTarget;

  // calculate the base weight
  baseWeight := pSubmesh.getBaseWeight;

  // get the number of morph targets
  morphTargetCount := pSubmesh.getMorphTargetWeightCount;

  position := CalVector.Create( 0, 0, 0 );
  normal := CalVector.Create( 0, 0, 0 );
  // calculate all submesh vertices
  vertexId := 0;
  while vertexId < vertexCount do
  begin
    // get the vertex
    myvertex := vectorVertex[ vertexId ];

    // blend the morph targets
    if ( baseWeight = 1.0 ) then
    begin
      position.x := myvertex.position.x;
      position.y := myvertex.position.y;
      position.z := myvertex.position.z;
      normal.x := myvertex.normal.x;
      normal.y := myvertex.normal.y;
      normal.z := myvertex.normal.z;
    end
    else
    begin
      position.x := baseWeight * myvertex.position.x;
      position.y := baseWeight * myvertex.position.y;
      position.z := baseWeight * myvertex.position.z;
      normal.x := baseWeight * myvertex.normal.x;
      normal.y := baseWeight * myvertex.normal.y;
      normal.z := baseWeight * myvertex.normal.z;

      for morphTargetId := 0 to morphTargetCount - 1 do
      begin
        bV := vectorSubMorphTarget[ morphTargetId ].getVectorBlendVertex[ vertexId ];
        currentWeight := pSubmesh.getMorphTargetWeight( morphTargetId );
        position.x := position.x + currentWeight * bV.position.x;
        position.y := position.y + currentWeight * bV.position.y;
        position.z := position.z + currentWeight * bV.position.z;
        normal.x := normal.x + currentWeight * bV.normal.x;
        normal.y := normal.y + currentWeight * bV.normal.y;
        normal.z := normal.z + currentWeight * bV.normal.z;
      end;
    end;

    // initialize vertex
    x := 0.0;
    y := 0.0;
    z := 0.0;

    // initialize normal
    nx := 0.0;
    ny := 0.0;
    nz := 0.0;

    v := CalVector.Create( position );
    n := CalVector.Create( normal );
    // blend together all vertex influences
    influenceCount := Length( myvertex.vectorInfluence );
    for influenceId := 0 to influenceCount - 1 do
    begin
      // get the influence
      _influence := myvertex.vectorInfluence[ influenceId ];

      // get the bone of the influence vertex
      pBone := vectorBone[ _influence.boneId ];

      // transform vertex with current state of the bone
      v.mult( pBone.getTransformMatrix );
      v.add( pBone.getTranslationBoneSpace );

      x := x + _influence.weight * v.x;
      y := y + _influence.weight * v.y;
      z := z + _influence.weight * v.z;

      // transform normal with current state of the bone
      n.mult( pBone.getTransformMatrix );

      nx := nx + _influence.weight * n.x;
      ny := ny + _influence.weight * n.y;
      nz := nz + _influence.weight * n.z;
    end;
    v.free;
    n.free;

    // save vertex position
    if ( pSubmesh.getCoreSubmesh.getSpringCount > 0 ) and ( pSubmesh.hasInternalData ) then
    begin
      // get the pgysical property of the vertex
      pP := vectorPhysicalProperty[ vertexId ];

      // assign new vertex position if there is no vertex weight
      if ( pP.weight = 0.0 ) then
      begin
        Vertices[ vertexId ].x := x;
        Vertices[ vertexId + 1 ].y := y;
        Vertices[ vertexId + 2 ].z := z;
      end;
    end
    else
    begin
      Vertices[ vertexId ].x := x;
      Vertices[ vertexId + 1 ].y := y;
      Vertices[ vertexId + 2 ].z  := z;
    end;

    // re-normalize normal if necessary
    if ( m_Normalize ) then
    begin

      scale := ( 1.0 / sqrt( nx * nx + ny * ny + nz * nz ) );

      Vertices[ vertexId + 3 ].x := nx * scale;
      Vertices[ vertexId + 4 ].y := ny * scale;
      Vertices[ vertexId + 5 ].z := nz * scale;
    end
    else
    begin
      Vertices[ vertexId + 3 ].x := nx;
      Vertices[ vertexId + 4 ].y := ny;
      Vertices[ vertexId + 5 ].z := nz;
    end;

    // next vertex position in buffer
    vertexId := vertexId + 6;
  end;
  position.Free;
  normal.Free;
end;

procedure CalPhysique.calculateVerticesNormalsAndTexCoords( var pSubmesh : CalSubmesh; var Vertices : TVertices; NumTexCoords : integer = 1 );
begin
  (*// get bone vector of the skeleton
  std::vector<CalBone *>& vectorBone = m_pModel.getSkeleton.getVectorBone;

  // get vertex vector of the core submesh
  std::vector<CalCoreSubmesh::Vertex>& vectorVertex = pSubmesh.getCoreSubmesh.getVectorVertex;

  // get the texture coordinate vector vector
  std::vector<std::vector<CalCoreSubmesh::TextureCoordinate> >& vectorvectorTextureCoordinate = pSubmesh.getCoreSubmesh.getVectorVectorTextureCoordinate;

  int TextureCoordinateCount=(int)vectorvectorTextureCoordinate.size;

  // check if the map id is valid
  if(((NumTexCoords < 0) || (NumTexCoords > TextureCoordinateCount)))
  {
  if(TextureCoordinateCount!=0)
  {
   {$IFDEF DEBUG_CAL3D}
   CalError::setLastError(CalError::INVALID_HANDLE, __FILE__, __LINE__);
   {$ENDIF}
   return -1;
  }
  }

  // get physical property vector of the core submesh
  std::vector<CalCoreSubmesh::PhysicalProperty>& vectorPhysicalProperty = pSubmesh.getCoreSubmesh.getVectorPhysicalProperty;

  // get the number of vertices
  int vertexCount;
  vertexCount = pSubmesh.getVertexCount;

  // get the sub morph target vector from the core sub mesh
  std::vector<CalCoreSubMorphTarget*>& vectorSubMorphTarget =
  pSubmesh.getCoreSubmesh.getVectorCoreSubMorphTarget;

  // calculate the base weight
  float baseWeight = pSubmesh.getBaseWeight;

  // get the number of morph targets
  int morphTargetCount = pSubmesh.getMorphTargetWeightCount;

  // calculate all submesh vertices
  int vertexId;
  for(vertexId = 0; vertexId < vertexCount; ++vertexId)
  {
    // get the vertex
    CalCoreSubmesh::Vertex& vertex = vectorVertex[vertexId];

    // blend the morph targets
    CalVector position(0,0,0);
    CalVector normal(0,0,0);
    if(baseWeight == 1.0f)
    {
      position.x = vertex.position.x;
      position.y = vertex.position.y;
      position.z = vertex.position.z;
      normal.x = vertex.normal.x;
      normal.y = vertex.normal.y;
      normal.z = vertex.normal.z;
    }
    else
    {
      position.x = baseWeight*vertex.position.x;
      position.y = baseWeight*vertex.position.y;
      position.z = baseWeight*vertex.position.z;
      normal.x = baseWeight*vertex.normal.x;
      normal.y = baseWeight*vertex.normal.y;
      normal.z = baseWeight*vertex.normal.z;
      int morphTargetId;
      for(morphTargetId=0; morphTargetId < morphTargetCount;++morphTargetId)
      {
        CalCoreSubMorphTarget::BlendVertex& blendVertex =
        vectorSubMorphTarget[morphTargetId].getVectorBlendVertex[vertexId];
        float currentWeight = pSubmesh.getMorphTargetWeight(morphTargetId);
        position.x += currentWeight*blendVertex.position.x;
        position.y += currentWeight*blendVertex.position.y;
        position.z += currentWeight*blendVertex.position.z;
        normal.x += currentWeight*blendVertex.normal.x;
        normal.y += currentWeight*blendVertex.normal.y;
        normal.z += currentWeight*blendVertex.normal.z;
      }
    }

    // initialize vertex
    float x, y, z;
    x = 0.0f;
    y = 0.0f;
    z = 0.0f;

 // initialize normal
    float nx, ny, nz;
    nx = 0.0f;
    ny = 0.0f;
    nz = 0.0f;

    // blend together all vertex influences
    int influenceId;
 int influenceCount=(int)vertex.vectorInfluence.size;
    for(influenceId = 0; influenceId < influenceCount; ++influenceId)
    {
      // get the influence
      CalCoreSubmesh::Influence& influence = vertex.vectorInfluence[influenceId];

      // get the bone of the influence vertex
      CalBone *pBone;
      pBone = vectorBone[influence.boneId];

      // transform vertex with current state of the bone
      CalVector v(position);
      v *= pBone.getTransformMatrix;
      v += pBone.getTranslationBoneSpace;

      x += influence.weight * v.x;
      y += influence.weight * v.y;
      z += influence.weight * v.z;

   // transform normal with current state of the bone
      CalVector n(normal);
      n *= pBone.getTransformMatrix;

      nx += influence.weight * n.x;
      ny += influence.weight * n.y;
      nz += influence.weight * n.z;
    }

    // save vertex position
    if(pSubmesh.getCoreSubmesh.getSpringCount > 0 ) and ( pSubmesh.hasInternalData)
    {
      // get the pgysical property of the vertex
      CalCoreSubmesh::PhysicalProperty& physicalProperty = vectorPhysicalProperty[vertexId];

      // assign new vertex position if there is no vertex weight
      if(physicalProperty.weight == 0.0f)
      {
        pVertexBuffer[0] = x;
        pVertexBuffer[1] = y;
        pVertexBuffer[2] = z;
      }
    }
    else
    {
      pVertexBuffer[0] = x;
      pVertexBuffer[1] = y;
      pVertexBuffer[2] = z;
    }

  // re-normalize normal if necessary
    if (m_Normalize)
    {
      float scale;
      scale = (float) (1.0f / sqrt(nx * nx + ny * ny + nz * nz));

      pVertexBuffer[3] = nx * scale;
      pVertexBuffer[4] = ny * scale;
      pVertexBuffer[5] = nz * scale;
    }
    else
    {
      pVertexBuffer[3] = nx;
      pVertexBuffer[4] = ny;
      pVertexBuffer[5] = nz;
    }

 pVertexBuffer += 6;
 
 if(TextureCoordinateCount==0)
 {
  pVertexBuffer+=NumTexCoords*2;
 }
 else
 {
  for(int mapId=0; mapId < NumTexCoords; ++mapId)
  {
   pVertexBuffer[0] = vectorvectorTextureCoordinate[mapId][vertexId].u;
   pVertexBuffer[1] = vectorvectorTextureCoordinate[mapId][vertexId].v;
   pVertexBuffer += 2;
  }
 }
  }

  return vertexCount;*)
end;

procedure CalPhysique.Update;
var
  vectorMesh : CalMeshes;
  iteratorMesh : integer;
  vectorSubmesh : CalSubMeshes;
  iteratorSubmesh : integer;
  vectorVertex : TVertices;
  vectorNormal : TNormals;
  mapId : Cardinal;
  vectorTangentSpace : VectorTangentSpaces;
  meshCount, SubMeshCount, TangentSpaceCount : integer;
begin
  // Get rid of compiler warnings;
  vectorSubmesh := nil;
  vectorTangentSpace := nil;
  vectorNormal := nil;
  vectorVertex := nil;

  // get the attached meshes vector
  vectorMesh := m_pModel.getVectorMesh;

  meshCount := Length( vectorMesh );
  // loop through all the attached meshes
  for iteratorMesh := 0 to meshCount - 1 do
  begin
    // get the submesh vector of the mesh
    vectorSubmesh := vectorMesh[ iteratorMesh ].getVectorSubmesh;

    // loop through all the submeshes of the mesh
    SubMeshCount := Length( vectorSubmesh );
    for iteratorSubmesh := 0 to SubMeshCount - 1 do
    begin
      // check if the submesh handles vertex data internally
      if ( vectorSubmesh[ iteratorSubmesh ].hasInternalData ) then
      begin
        // calculate the transformed vertices and store them in the submesh
        vectorVertex := vectorSubmesh[ iteratorSubmesh ].getVectorVertex;
        calculateVertices( vectorSubmesh[ iteratorSubmesh ], vectorVertex );

        // calculate the transformed normals and store them in the submesh
        vectorNormal := vectorSubmesh[ iteratorSubmesh ].getVectorNormal;
        calculateNormals( vectorSubmesh[ iteratorSubmesh ], vectorNormal );

        TangentSpaceCount := Length( vectorSubmesh[ iteratorSubmesh ].getVectorVectorTangentSpace );
        for mapId := 0 to TangentSpaceCount - 1 do
        begin
          if ( vectorSubmesh[ iteratorSubmesh ].isTangentsEnabled( mapId ) ) then
          begin
            vectorTangentSpace := vectorSubmesh[ iteratorSubmesh ].getVectorVectorTangentSpace[ mapId ];
            calculateTangentSpaces( vectorSubmesh[ iteratorSubmesh ], mapId, vectorTangentSpace );
          end;
        end;
      end;
    end;
  end;
end;

procedure CalPhysique.SetNormalization( normalize : boolean );
begin
  m_Normalize := normalize;
end;

