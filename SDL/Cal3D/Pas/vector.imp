//----------------------------------------------------------------------------//
// Copyright (C) 2001 Paul TOTH                        Delphi translation     //
// Copyright (C) 2001 Bruno 'Beosil' Heidelberger      original C version     //
//----------------------------------------------------------------------------//
// This program is free software; you can redistribute it and/or modify it    //
// under the terms of the GNU General Public License as published by the Free //
// Software Foundation; either version 2 of the License, or (at your option)  //
// any later version.                                                         //
//----------------------------------------------------------------------------//
// vector.cpp

//----------------------------------------------------------------------------//
// Constructors                                                               //
//----------------------------------------------------------------------------//

constructor CalVector.Create( const mx : float; const my : float; const mz : float );
begin
  inherited Create;
  x := mx;
  y := my;
  z := mz;
end;

constructor CalVector.Create( const vector : CalVector );
begin
  inherited Create;
  x := vector.x;
  y := vector.y;
  z := vector.z;
end;

constructor CalVector.Create( const vector : string );
var
  i : integer;
  local : string;
begin
  inherited Create;
  local := vector;
  i := Pos( ' ', local );
  x := StrToFloat( Copy( local, 0, i - 1 ) );
  local := Copy( local, i + 1, System.Length( local ) - i + 1);
  i := Pos( ' ', local );
  y :=  StrToFloat( Copy( local, 0, i - 1 ) );
  local := Copy( local, i + 1,  System.Length( local ) - i + 1);
  z := StrToFloat( Copy( local, 0, i - 1 ) );
end;

procedure CalVector.assign( const vector : string );
var
  i : integer;
  local : string;
begin
  local := vector;
  i := Pos( ' ', local );
  x := StrToFloat( Copy( local, 0, i - 1 ) );
  local := Copy( local, i + 1, System.Length( local ) - i + 1);
  i := Pos( ' ', local );
  y :=  StrToFloat( Copy( local, 0, i - 1 ) );
  local := Copy( local, i + 1,  System.Length( local ) - i + 1);
  z := StrToFloat( Copy( local, 0, i - 1 ) );
end;

procedure CalVector.assign( const vector : CalVector );
begin
  x := vector.x;
  y := vector.y;
  z := vector.z;
end;

//----------------------------------------------------------------------------//
// Add the given vector                                                       //
//----------------------------------------------------------------------------//

procedure CalVector.add( v : CalVector );
begin
  x := x + v.x;
  y := y + v.y;
  z := z + v.z;
end;

//----------------------------------------------------------------------------//
// Substract the given vector                                                       //
//----------------------------------------------------------------------------//

procedure CalVector.Sub( v : CalVector );
begin
  x := x - v.x;
  y := y - v.y;
  z := z - v.z;
end;

class function CalVector.subNew( const v : CalVector; const u : CalVector  ) : CalVector;
begin
  result := CalVector.Create( v.x - u.x, v.y - u.y, v.z - u.z );
end;

//----------------------------------------------------------------------------//
// Interpolate to a given vector                                              //
//----------------------------------------------------------------------------//

procedure CalVector.blend( factor : float; v : CalVector );
begin
  x := x + factor * ( v.x - x );
  y := y + factor * ( v.y - y );
  z := z + factor * ( v.z - z );
end;

// Transforms the vector instance by a matrix.

procedure CalVector.mult( m : CalMatrix );
var
  ox : float;
  oy : float;
  oz : float;
begin
  ox := x;
  oy := y;
  oz := z;
  x := m.dxdx * ox + m.dxdy * oy + m.dxdz * oz;
  y := m.dydx * ox + m.dydy * oy + m.dydz * oz;
  z := m.dzdx * ox + m.dzdy * oy + m.dzdz * oz;
end;

// Transform the vector through a given quaternion

procedure CalVector.mult( q : CalQuaternion );
var
  temp : CalQuaternion;
begin
  temp := CalQuaternion.Create( -q.x, -q.y, -q.z, q.w );
  temp.mult( x, y, z );
  temp.mult( q );

  x := temp.x;
  y := temp.y;
  z := temp.z;

  temp.Free;
end;

// Scales the vector instance.

procedure CalVector.mult( f : float );
begin
  x := x * f;
  y := y * f;
  z := z * f;
end;

procedure CalVector.divide( f : float );
begin
  x := x / f;
  y := y / f;
  z := z / f;
end;

function CalVector.Equals( const v : CalVector ) : boolean;
begin
  result := ( ( x = v.x ) and ( y = v.y ) and ( z = v.z ) );
end;

procedure CalVector.LoadFromStream( AStream : TStream );
begin
  AStream.ReadBuffer( x, sizeof( x ) );
  AStream.ReadBuffer( y, sizeof( y ) );
  AStream.ReadBuffer( z, sizeof( z ) );
end;

function CalVector.normalize : float;
var
  length : float;
begin
  // calculate the length of the vector
  length := sqrt( x * x + y * y + z * z );

  // normalize the vector
  x := x / length;
  y := y / length;
  z := z / length;

  result := length;
end;

procedure CalVector.clear;
begin
  x := 0.0;
  y := 0.0;
  z := 0.0;
end;

function CalVector.length : float;
begin
  result := sqrt( x * x + y * y + z * z );
end;

function CalPlane.eval( p : TVertex ) : float;
begin
  result := p.x * a + p.y * b + p.z * c + d;
end;

function CalPlane.eval( p : CalVector ) : float;
begin
  result := p.x * a + p.y * b + p.z * c + d;
end;

procedure CalPlane.setPosition( p : TVertex );
begin
  d := -p.x * a - p.y * b - p.z * c;
end;

procedure CalPlane.setPosition( p : CalVector );
begin
  d := -p.x * a - p.y * b - p.z * c;
end;

procedure CalPlane.setNormal( p : TVertex );
begin
  a := p.x;
  b := p.y;
  c := p.z;
  d := -1E32;
end;

procedure CalPlane.setNormal( p : CalVector );
begin
  a := p.x;
  b := p.y;
  c := p.z;
  d := -1E32;
end;


constructor CalBoundingBox.Create;
var
  i :integer;
begin
  inherited;
  for i := 0 to 5 do
     plane[ i ] := CalPlane.Create;
end;

destructor CalBoundingBox.Destroy;
var
  i :integer;
begin
  for i := 0 to 5 do
     plane[ i ].Free;
  inherited;
end;

procedure CalBoundingBox.computePoints( var p : TVertices );
var
  m : CalMatrix;
  i, j, k : integer;
  x, y, z, det : float;
  pointid : integer;
begin
  m := CalMatrix.Create;
  pointid := 0;
  for i := 0 to 1 do
    for j := 2 to 3 do
      for k := 4 to 5 do
      begin
        m.dxdx := plane[ i ].a;
        m.dxdy := plane[ i ].b;
        m.dxdz := plane[ i ].c;
        m.dydx := plane[ j ].a;
        m.dydy := plane[ j ].b;
        m.dydz := plane[ j ].c;
        m.dzdx := plane[ k ].a;
        m.dzdy := plane[ k ].b;
        m.dzdz := plane[ k ].c;

        det := m.det;

        if ( det <> 0 ) then
        begin
          m.dxdx := -plane[ i ].d;
          m.dxdy := plane[ i ].b;
          m.dxdz := plane[ i ].c;
          m.dydx := -plane[ j ].d;
          m.dydy := plane[ j ].b;
          m.dydz := plane[ j ].c;
          m.dzdx := -plane[ k ].d;
          m.dzdy := plane[ k ].b;
          m.dzdz := plane[ k ].c;

          x := m.det / det;

          m.dxdx := plane[ i ].a;
          m.dxdy := -plane[ i ].d;
          m.dxdz := plane[ i ].c;
          m.dydx := plane[ j ].a;
          m.dydy := -plane[ j ].d;
          m.dydz := plane[ j ].c;
          m.dzdx := plane[ k ].a;
          m.dzdy := -plane[ k ].d;
          m.dzdz := plane[ k ].c;

          y := m.det / det;

          m.dxdx := plane[ i ].a;
          m.dxdy := plane[ i ].b;
          m.dxdz := -plane[ i ].d;
          m.dydx := plane[ j ].a;
          m.dydy := plane[ j ].b;
          m.dydz := -plane[ j ].d;
          m.dzdx := plane[ k ].a;
          m.dzdy := plane[ k ].b;
          m.dzdz := -plane[ k ].d;

          z := m.det / det;

          p[ pointid ].x := x;
          p[ pointid ].y := y;
          p[ pointid ].z := z;
        end
        else
        begin
          p[ pointid ].x := 0.0;
          p[ pointid ].y := 0.0;
          p[ pointid ].z := 0.0;
        end;

        inc( pointid );
      end;
  m.Free;
end;

