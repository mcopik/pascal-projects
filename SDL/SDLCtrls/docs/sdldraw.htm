<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd">

<html>
<head>
<title>
  Stojkovic's SDL Page - SDLDraw
</title>

<meta http-equiv="content-style-type" content="text/css">
<meta name="description" content="sdl controls">
<meta name="keywords" content="sdl,gui,sdlgui,ctrls,sdlctrls,controls,formeditor,igor,stojkovic,gamemaker">

<link rel="stylesheet" type="text/css" href="default.css">

</head>

<body>

<h1>SDLDraw</h1>

<div class="navigator">
<a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=118226&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo" /></a>
<ul>
  <li><a href="index.html">News</a></li>
  <li><a href="description.htm">Description</a>
  <ul class="sublist">
    <li>SDLDraw</li>
    <li><a href="sdlfont.htm">SDLFont</a></li>
    <li><a href="sdlgui.htm">SDLGui</a></li>
    <li><a href="sdlctrls.htm">SDL Controls</a></li>
  </ul></li>
  <li><a href="sdltools.htm">SDL Tools</a></li>
  <li><a href="faq.htm">FAQ</a></li>
  <li><a href="scrshot.htm">Screen shots</a></li>
  <li><a href="download.htm">Download</a></li>
  <li><a href="aboutme.htm">About Me</a></li>
</ul>
</div>

<p>
This unit mainly consist of classes that helps working with surfaces. But let's go over helper functions first.

<h2>Helper fuctions</h2>
<dl class="code">
  <dt>function LightColor(Color: Cardinal;Value: Integer): Cardinal;
  <dd>This function first calculate lightness of given Color in range 0-255 and than adds Value to that lightness.
  It makes sure result is in range 0-255 and returns it.
  <dt>function HueColorTo(Color,ToColor: Cardinal): Cardinal;
  <dd>This function moves hue of Color to match hue of ToColor. This is how you get same shade of ToColor but with
  lightness and saturaion of Color.
  <dt>function RGBtoHSL(Color: Cardinal): Cardinal;
  <dd>You give this function Color in format $RRGGBB (Red,Green,Blue) and it returns it in format $HHSSLL
  (Hue, Saturation, Lightness).
  <dt>function HSLtoRGB(Color: Cardinal): Cardinal;
  <dd>You give this function Color in format $HHSSLL (Hue, Saturation, Lightness) and it returns it in format
  $RRGGBB (Red,Green,Blue).
  <dt>procedure DefaultInitGL;
  <dd>This procedure sets viewport to entire main surface, projection matrix to Ortho, ClearColor to 0,
  ClearDepth to 1, BlendFunc to (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA) and enabled blending.
  <dt>function SDLPoint(AX,AY: Integer): TPoint;
  <dd>Simply returns TPoint with X=AX and Y=AY.
  <dt>procedure InflateRect(var Rect: TSDL_Rect;dx,dy: Integer);
  <dd>This procedure increases or decreases the specified rectangle.
  <dt>procedure OffsetRect(var Rect: TSDL_Rect;dx,dy: Integer);
  <dd>This procedure moves the specified rectangle by dx pixels horizontaly and dy pixels verticaly.
  <dt>function PointInRect(const Point: TPoint;const Rect: TSDL_Rect): Boolean;
  <dd>Returns True if Point is inside Rect.
  <dt>function RectInRect(const Rect1, Rect2: TSDL_Rect): Boolean;
  <dd>Returns True if Rect1 is in Rect2.
  <dt>function OverlapRect(const Rect1, Rect2: TSDL_Rect): Boolean;
  <dd>Returns True if Rect1 and Rect2 overlaps.
  <dt>procedure WriteString(Stream: TStream;const Value: String);
  <dd>Writes length of Value and then value it self in the Stream. I put this here becouse I needed it everywhere.
  <dt>procedure ReadString(Stream: TStream;var Value: String);
  <dd>Reads length of Value and then value it self from the Stream. I put this here becouse I needed it everywhere.
</dl>

<h2>SDLScreen global variable</h2>
<p>No matter if you create TSDLScreen or TSDLGLScreen you should assign it to this variable so every other
unit can also use main surface.

<h2>TSDLScreen and TSDLGLScreen</h2>
<p>
TSDLScreen represents screen surface. The first thing you create in SDL application is this. TSDLGLScreen you create
if you want to use OpenGL with SDL. It has the same properties and methods but some of them are overriden to give OpenGL
functionality. Properties are:
<dl class="code">
  <dt>property ClipRect: TSDL_Rect read FClipRect;
  <dd>Returns current clip rect of main surface.
  <dt>property FPS: Integer read FFPS;
  <dd>Returns Frames Per Second.
  <dt>property OpenGLScreen: Boolean read FOpenGLScreen;
  <dd>Returns True if this is TSDLGLScreen.
  <dt>property SDLImageClass: TSDLImageClass read FSDLImageClass;
  <dd>This returns TSDLImage if this is TSDLScreen and TSDLGLImage if this is TSDLGLScreen.
  <dt>property Surface: PSDL_Surface read FSurface;
  <dd>Returns pointer to main surface.
  <dt>property SurfaceRect: TSDL_Rect read FSurfaceRect;
  <dd>Returns main surface rect: x=0, y=0, w=Surface.w, h=Surface.h.
</dl>

<p>
When you call methods which has surface as a parameter if you set that parameter to nil it will be the same
as you set it to main surface if you are not in OpenGL mode. Methods are:
<dl class="code">
  <dt>constructor Create(const Caption: string;W,H,Bpp: Integer; FS: Boolean); virtual;
  <dd>Creates main surface with height = H, width = W and BitsPerPixel = Bpp. if FS is True surface is fullscreen,
  else it is in a window with caption = Caption. Flags for creating are SDL_HWSURFACE and SDL_DOUBLEBUF.
  <dt>procedure Flip; virtual;
  <dd>Flips main surface to the screen.
  <dt>procedure Clear(ASurface: PSDL_Surface;Color: Cardinal); virtual;
  <dd>Clears the specified surface to Color.
  <dt>procedure SetClipRect(ASurface: PSDL_Surface; rect: PSDL_Rect); virtual;
  <dd>Sets clip region to rect on specified surface.
  <dt>function MapCardinal(Format : PSDL_PixelFormat;Color: Cardinal): Cardinal; virtual;
  <dd>Returns color in specifed format from color in $AARRGGBB (A-Alpha) format.
  <dt>function GetRGBAPixel(ASurface: Pointer;X,Y: Integer): Cardinal; virtual;
  <dd>Returns color of pixel X,Y from specified surface in $AARRGGB format.
  <dt>procedure Colorize(ASurface: PSDL_Surface; Value: Cardinal);
  <dd>Colorize the specified surcface maintaining every pixel's lightness.
  <dt>procedure ModifyHueFor(ASurface: PSDL_Surface; Value: Integer);
  <dd>Moves the color of every pixel in the specified surface in spectar from 0 to 255 for the specified value.
  <dt>procedure ModifyHueTo(ASurface: PSDL_Surface; ToColor: Cardinal);
  <dd>Moves the color of every pixel in the specified surface in spectar from 0 to 255 to match the position of ToColor
  in spectar.
  <dt>procedure DrawOrthoLine(S: PSDL_Surface;Horiz: Boolean; x,y: Integer;Length,C: Cardinal); virtual;
  <dd>if Horiz is True draws horizontal, and if it is false draws vertical line on the specified surface
  from x,y with length=Length and color = C. It also clips the line if it is outside surface's clip region.
  <dt>procedure FillRect(S: PSDL_Surface;const Rect: TSDL_Rect;C: Cardinal); virtual;
  <dd>Fills the specified rect of the specified surface with color C.
  <dt>procedure DrawFrame(S: PSDL_Surface;const Rect: TSDL_Rect;C: Cardinal); virtual;
  <dd>Draws frame of color C on the specified surface.
  <dt>procedure Draw3DControl(S:PSDL_Surface;const Rect: TSDL_Rect;C: Cardinal; BorderWidth: Integer;Down: Boolean=False); virtual;
  <dd>Draws 3D control on the specified surface.  It first fills the Rect with color C then it takes
  a bit lighter and a bit darker color then C. if Down is True it draws left and top border in light color
  and right and bottom border in dark color. if Down is false those colors exchange their places. Border's width is given
  with BorderWidth parameter.
  <dt>procedure DrawArrow(S: PSDL_Surface;Dir: TArrowDirection; const Rect: TSDL_Rect;C: Cardinal); virtual;
  <dd>Draws a triangle in the specified rect of the specified surface with color = C and direction given by Dir parameter
  which can be adUp,adLeft,adDown or adRight.
</dl>

<h2>TSDLImage and TSDLGLImage</h2>
<p>
This classes represents one sdl surface and has methods for its drawing. TSDLGLImage inherits from TSDLImage but
has overriden methods and some new properties. Properties are:
<dl class="code">
  <dt>property Alpha: Byte read FAlpha write SetAlpha;
  <dd>This property represents how much is the entire surface transparent. 0 means totaly trnasparent and
  255 means totaly opaque.
  <dt>property Height: Integer read GetHeight;
  <dd>Returns Height of an image but as a hole multiple of PatternHeight. if PatternHeight is 0 then it returns
  surface's height. If you need surface's height you should use Surface.h property.
  <dt>property Name: string read FName write FName;
  <dd>Name of an image in TSDLImages - image list.
  <dt>property PatternCount: Integer read GetPatternCount;
  <dd>if PatternWidth and PatternHeight are greater then 0 returns noumber of patterns, else it returns 0.
  <dt>property PatternHeight: Integer read GetPatternHeight write FPatternHeight;
  <dd>Represents Height of one pattern.
  <dt>property PatternRects[Index: Integer]: TSDL_Rect read GetPatternRect;
  <dd>Returns rect of pattern with the specified index where patterns are counted from left to right and from
  top to bottom.
  <dt>property PatternWidth: Integer read GetPatternWidth write FPatternWidth;
  <dd>Represents Width of one pattern.
  <dt>property Surface: PSDL_Surface read FSurface write SetSurface;
  <dd>Returns Surface of this image.
  <dt>property Transparent: Boolean read FTransparent write SetTransparent;
  <dd>Set this to True if your image has a color you want to be transparent.
  <dt>property TransparentColor: Cardinal read FTransparentColor write SetTransparentColor;
  <dd>Represents color which will be considered transparent while drawing the image.
  <dt>property UseAlphaCh: Boolean read FUseAlphaCh write SetUseAlphaCh;
  <dd>Set this to True if your image has an alpha channel which you want to use.
  <dt>property Width: Integer read GetWidth;
  <dd>Returns Width of an image but as a hole multiple of PatternWidth. if PatternWidth is 0 then it returns
  surface's width. If you need surface's width you should use Surface.w property.
</dl>
<p>
TSDLGLImage also has:
<dl class="code">
  <dt>property MinFilter : GLint read FMinFilter write SetMinFilter;
  <dd>Can be GL_NEAREST, GL_LINEAR, GL_NEAREST_MIPMAP_NEAREST, GL_LINEAR_MIPMAP_NEAREST, GL_NEAREST_MIPMAP_LINEAR,
  GL_LINEAR_MIPMAP_LINEAR. Default is GL_LINEAR.
  <dt>property MagFilter : GLint read FMagFilter write SetMagFilter;
  <dd>Can be GL_NEAREST, GL_LINEAR. Default is GL_LINEAR.
  <dt>property TexWrapS : GLint read FTexWrapS write SetTexWrapS;
  <dd>Can be GL_CLAMP, GL_REPEAT. Default is GL_REPEAT.
  <dt>property TexWrapT : GLint read FTexWrapT write SetTexWrapT;
  <dd>Can be GL_CLAMP, GL_REPEAT. Default is GL_REPEAT.
  <dt>TextureID : GLuint;
  <dd>Represents OpenGL texture ID.
</dl>

<h2>TSDLImages</h2>
<p>
TSDLImages is an image collection. You should create it with SDLScreen.SDLImageClass as a parameter. It has one property:
<dl class="code">
  <dt>property Items[Index: Integer]: TSDLImage read GetItem write SetItem; default;
  <dd>Represents and item with the specified index.
</dl>
<p>
And a few methods:
<dl class="code">
  <dt>function ByName(const AName: string): TSDLImage;
  <dd>Returns an image with the specified name.
  <dt>function Add(const AName: string): TSDLImage;
  <dd>Creates a new image with the specified name. Adds image type of main surface - TSDLImage or TSDLGLImage.
  <dt>function Insert(Index: Integer): TSDLImage;
  <dd>Creates a new image at the specified position.
  <dt>function IndexOfItem(const AName: string): Integer;
  <dd>Returns Index of image with the specified name.
  <dt>function LoadFromSil(const FileName: string): Integer;
  <dd>Loads an image list from sil - Sdl Image List file. It returns ESILERROR = -1 on unknown error,
  ESILUNKNOWNFORMAT = -2 if format is not supported, ESILUNSUPPORTEDVER = -3 if version is not supported,
  ESILCOMPRESSED = 1 if it is compressed and 0 if everything went well and it is not compressed.
</dl>

</body>
</html>
