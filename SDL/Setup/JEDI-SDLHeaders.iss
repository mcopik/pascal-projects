; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "JEDI-SDLv1.0 Headers"
#define MyAppVerName "JEDI-SDL 1.0"
#define MyAppPublisher "Savage Software Solutions"
#define MyAppURL "http://jedi-sdl.pascalgamedevelopment.com"
#define MyAppUrlName "JEDISDL.url"

[Setup]
AppName={#MyAppName}
AppVerName={#MyAppVerName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputBaseFilename=JEDI-SDLHeadersSetup
Compression=lzma
SolidCompression=true
WizardImageFile=compiler:wizmodernimage-IS.bmp
WizardSmallImageFile=compiler:wizmodernsmallimage-IS.bmp
VersionInfoVersion=1.0.0.0
VersionInfoCompany=Savage Software Solutions
VersionInfoCopyright=Savage Software Solutions 2007

[Languages]
Name: english; MessagesFile: compiler:Default.isl
Name: basque; MessagesFile: compiler:Languages\Basque.isl
Name: brazilianportuguese; MessagesFile: compiler:Languages\BrazilianPortuguese.isl
Name: catalan; MessagesFile: compiler:Languages\Catalan.isl
Name: czech; MessagesFile: compiler:Languages\Czech.isl
Name: danish; MessagesFile: compiler:Languages\Danish.isl
Name: dutch; MessagesFile: compiler:Languages\Dutch.isl
Name: finnish; MessagesFile: compiler:Languages\Finnish.isl
Name: french; MessagesFile: compiler:Languages\French.isl
Name: german; MessagesFile: compiler:Languages\German.isl
Name: hebrew; MessagesFile: compiler:Languages\Hebrew.isl
Name: hungarian; MessagesFile: compiler:Languages\Hungarian.isl
Name: italian; MessagesFile: compiler:Languages\Italian.isl
Name: norwegian; MessagesFile: compiler:Languages\Norwegian.isl
Name: polish; MessagesFile: compiler:Languages\Polish.isl
Name: portuguese; MessagesFile: compiler:Languages\Portuguese.isl
Name: russian; MessagesFile: compiler:Languages\Russian.isl
Name: spanish; MessagesFile: compiler:Languages\Spanish.isl
Name: slovak; MessagesFile: compiler:Languages\Slovak.isl
Name: slovenian; MessagesFile: compiler:Languages\Slovenian.isl


[INI]
Filename: {app}\{#MyAppUrlName}; Section: InternetShortcut; Key: URL; String: {#MyAppURL}

[Icons]
Name: {group}\{cm:ProgramOnTheWeb,{#MyAppName}}; Filename: {app}\{#MyAppUrlName}; IconFilename: {sys}\SHELL32.dll; IconIndex: 14
Name: {group}\{cm:UninstallProgram,{#MyAppName}}; Filename: {uninstallexe}

[UninstallDelete]
Type: files; Name: {app}\{#MyAppUrlName}

[Files]
Source: ..\..\JEDI-SDLv1.0Beta\SDL\*; DestDir: {app}\SDL; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\SDL_Image\*; DestDir: {app}\SDL_Image; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\SDL_Mixer\*; DestDir: {app}\SDL_Mixer; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\SDL_Net\*; DestDir: {app}\SDL_Net; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\SDL_ttf\*; DestDir: {app}\SDL_ttf; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\smpeg\*; DestDir: {app}\smpeg; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\OpenGL\*; DestDir: {app}\OpenGL; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\ODE\*; DestDir: {app}\ODE; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\Newton\*; DestDir: {app}\Newton; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\HawkVoice\*; DestDir: {app}\HawkVoice; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\Fmod\*; DestDir: {app}\Fmod; Flags: recursesubdirs createallsubdirs
Source: ..\..\JEDI-SDLv1.0Beta\Documentation\*; DestDir: {app}\Documentation; Flags: recursesubdirs createallsubdirs


[Code]
var
  FinishedInstall: Boolean;
  FinishedUnInstall: Boolean;

const
  D4LibPath = 'Software\Borland\Delphi\4.0\Library';
  D5LibPath = 'Software\Borland\Delphi\5.0\Library';
  D6LibPath = 'Software\Borland\Delphi\6.0\Library';
  D7LibPath = 'Software\Borland\Delphi\7.0\Library';
  BDS4LibPath = 'Software\Borland\BDS\4.0\Library';
  BDS5LibPath = 'Software\Borland\BDS\5.0\Library';
  FPCKeyPath = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\FreePascal_is1';

procedure DeinitializeSetup();
var
  HeaderPath: String;
  InstallDir: String;
  LibraryPath: String;
  FPCArray : TArrayOfString;
begin
  if FinishedInstall then
  begin
    InstallDir := ExpandConstant('{app}');
    HeaderPath := InstallDir + '\SDL\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_Image\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_Mixer\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_Net\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_ttf\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\smpeg\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\OpenGL\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\ODE\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\Newton\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\HawkVoice\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\Fmod\Pas;';
    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D4LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D4LibPath, 'Search Path', LibraryPath );
      LibraryPath := LibraryPath + ';'
      RegWriteStringValue(HKEY_CURRENT_USER, D4LibPath, 'Search Path', LibraryPath + HeaderPath);
      RegWriteStringValue(HKEY_CURRENT_USER, D4LibPath, 'Browsing Path', LibraryPath + HeaderPath);
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D5LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D5LibPath, 'Search Path', LibraryPath );
      LibraryPath := LibraryPath + ';'
      RegWriteStringValue(HKEY_CURRENT_USER, D5LibPath, 'Search Path', LibraryPath + HeaderPath);
      RegWriteStringValue(HKEY_CURRENT_USER, D5LibPath, 'Browsing Path', LibraryPath + HeaderPath);
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D6LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D6LibPath, 'Search Path', LibraryPath );
      LibraryPath := LibraryPath + ';'
      RegWriteStringValue(HKEY_CURRENT_USER, D6LibPath, 'Search Path', LibraryPath + HeaderPath);
      RegWriteStringValue(HKEY_CURRENT_USER, D6LibPath, 'Browsing Path', LibraryPath + HeaderPath);
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D7LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D7LibPath, 'Search Path', LibraryPath );
      LibraryPath := LibraryPath + ';'
      RegWriteStringValue(HKEY_CURRENT_USER, D7LibPath, 'Search Path', LibraryPath + HeaderPath);
      RegWriteStringValue(HKEY_CURRENT_USER, D7LibPath, 'Browsing Path', LibraryPath + HeaderPath);
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, BDS4LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, BDS4LibPath, 'Search Path', LibraryPath );
      LibraryPath := LibraryPath + ';'
      RegWriteStringValue(HKEY_CURRENT_USER, BDS4LibPath, 'Search Path', LibraryPath + HeaderPath);
      RegWriteStringValue(HKEY_CURRENT_USER, BDS4LibPath, 'Browsing Path', LibraryPath + HeaderPath);
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, BDS5LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, BDS5LibPath, 'Search Path', LibraryPath );
      LibraryPath := LibraryPath + ';'
      RegWriteStringValue(HKEY_CURRENT_USER, BDS5LibPath, 'Search Path', LibraryPath + HeaderPath);
      RegWriteStringValue(HKEY_CURRENT_USER, BDS5LibPath, 'Browsing Path', LibraryPath + HeaderPath);
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_LOCAL_MACHINE, FPCKeyPath, 'Inno Setup: App Path') then
    begin
      RegQueryStringValue(HKEY_LOCAL_MACHINE, FPCKeyPath, 'Inno Setup: App Path', LibraryPath );
      SetArrayLength( FPCArray, 16 );
      FPCArray[0] := '';
      FPCArray[1] := '# JEDI-SDL include paths';
      FPCArray[2] := '-Fi' + InstallDir + '\SDL\Pas';
      FPCArray[3] := '';
      FPCArray[4] := '# JEDI-SDL unit paths';
      FPCArray[5] := '-Fu' + InstallDir + '\SDL\Pas';
      FPCArray[6] := '-Fu' + InstallDir + '\SDL_Image\Pas';
      FPCArray[7] := '-Fu' + InstallDir + '\SDL_Mixer\Pas';
      FPCArray[8] := '-Fu' + InstallDir + '\SDL_Net\Pas';
      FPCArray[9] := '-Fu' + InstallDir + '\SDL_ttf\Pas';
      FPCArray[10] := '-Fu' + InstallDir + '\smpeg\Pas';
      FPCArray[11] := '-Fu' + InstallDir + '\OpenGL\Pas';
      FPCArray[12] := '-Fu' + InstallDir + '\ODE\Pas';
      FPCArray[13] := '-Fu' + InstallDir + '\Newton\Pas';
      FPCArray[14] := '-Fu' + InstallDir + '\HawkVoice\Pas';
      FPCArray[15] := '-Fu' + InstallDir + '\Fmod\Pas';
      SaveStringsToFile(LibraryPath + '\bin\i386-win32\fpc.cfg', FPCArray, true );
      SetArrayLength( FPCArray, 0 );
    end;
  end;
end;

procedure DeinitializeUninstall();
var
  HeaderPath: String;
  InstallDir: String;
  LibraryPath: String;
  iPos : integer;
begin
  if FinishedUnInstall then
  begin
    InstallDir := ExpandConstant('{app}');
    HeaderPath := InstallDir + '\SDL\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_Image\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_Mixer\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_Net\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\SDL_ttf\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\smpeg\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\OpenGL\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\ODE\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\Newton\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\HawkVoice\Pas;';
    HeaderPath := HeaderPath + InstallDir + '\Fmod\Pas;';
    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D4LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D4LibPath, 'Search Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D4LibPath, 'Search Path', LibraryPath);
      end;

      RegQueryStringValue(HKEY_CURRENT_USER, D4LibPath, 'Browsing Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D4LibPath, 'Browsing Path', LibraryPath);
      end;
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D5LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D5LibPath, 'Search Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D5LibPath, 'Search Path', LibraryPath);
      end;

      RegQueryStringValue(HKEY_CURRENT_USER, D5LibPath, 'Browsing Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D5LibPath, 'Browsing Path', LibraryPath);
      end;
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D6LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D6LibPath, 'Search Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D6LibPath, 'Search Path', LibraryPath);
      end;

      RegQueryStringValue(HKEY_CURRENT_USER, D6LibPath, 'Browsing Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D6LibPath, 'Browsing Path', LibraryPath);
      end;
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, D7LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, D7LibPath, 'Search Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D7LibPath, 'Search Path', LibraryPath);
      end;

      RegQueryStringValue(HKEY_CURRENT_USER, D7LibPath, 'Browsing Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, D7LibPath, 'Browsing Path', LibraryPath);
      end;
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, BDS4LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, BDS4LibPath, 'Search Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, BDS4LibPath, 'Search Path', LibraryPath);
      end;

      RegQueryStringValue(HKEY_CURRENT_USER, BDS4LibPath, 'Browsing Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, BDS4LibPath, 'Browsing Path', LibraryPath);
      end;
    end;

    LibraryPath := '';
    if RegValueExists(HKEY_CURRENT_USER, BDS5LibPath, 'Search Path') then
    begin
      RegQueryStringValue(HKEY_CURRENT_USER, BDS5LibPath, 'Search Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, BDS5LibPath, 'Search Path', LibraryPath);
      end;

      RegQueryStringValue(HKEY_CURRENT_USER, BDS5LibPath, 'Browsing Path', LibraryPath );
      iPos := Pos(HeaderPath, LibraryPath);
      if iPos > 0 then
      begin
        StringChangeEx(LibraryPath, HeaderPath, '', True);
        RegWriteStringValue(HKEY_CURRENT_USER, BDS5LibPath, 'Browsing Path', LibraryPath);
      end;
    end;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if ( CurStep = ssPostInstall ) then
  begin
    FinishedInstall := True;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if ( CurUninstallStep = usPostUninstall ) then
  begin
    FinishedUnInstall := True;
  end;
end;
